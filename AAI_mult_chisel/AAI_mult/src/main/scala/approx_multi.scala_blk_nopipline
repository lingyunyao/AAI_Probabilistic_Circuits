import chisel3._
import chisel3.stage.{ChiselStage, ChiselGeneratorAnnotation}
import hardfloat._
import chisel3.util._

class RawFloat(expWidth: Int, sigWidth: Int) extends Bundle {
  val isNaN = Bool()
  val isInf = Bool()
  val isZero = Bool()
  val exp = UInt((expWidth).W)
  val sig = UInt(sigWidth.W)
}

object Utils {
  def isSigNaNUnsignedRawFloat(x: RawFloat): Bool = {
    val expWidth = x.exp.getWidth
    val sigWidth = x.sig.getWidth
    x.isNaN && !x.isInf && !x.isZero && x.exp === ((1 << expWidth) - 1).U && x.sig(sigWidth - 1) === 0.U && x.sig(sigWidth - 2, 0) =/= 0.U
  }
}


//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
class Approx_multi_RawFN(expWidth: Int, sigWidth: Int) extends RawModule
//class AddRawFN(expWidth: Int, sigWidth: Int) extends Module
{
    val io = IO(new Bundle {
        //val subOp = Input(Bool())
        val a = Input(new RawFloat(expWidth, sigWidth))
        val b = Input(new RawFloat(expWidth, sigWidth))
        val invalidExc = Output(Bool())
        val rawOut = Output(new RawFloat(expWidth, sigWidth))
    })

    val notSigNaN_invalidExc = (io.a.isInf && io.b.isZero) || (io.a.isZero && io.b.isInf)
    val notNaN_isInfOut = io.a.isInf || io.b.isInf
    val notNaN_isZeroOut = io.a.isZero || io.b.isZero

    val bias = (1 << (expWidth - 1)) - 1
    val rawOut_exp = io.a.exp - bias.U + io.b.exp
    val rawOut_sig = (Cat(0.U(1.W), io.a.sig) + (Cat(0.U(1.W), io.b.sig)))(sigWidth, 0)

    when (notNaN_isZeroOut) {
        io.rawOut.exp := 0.U
        io.rawOut.sig := 0.U
    } .elsewhen (rawOut_sig(sigWidth) === 1.U) {
        io.rawOut.exp := rawOut_exp + 1.U
        io.rawOut.sig := rawOut_sig
    }.otherwise {
        io.rawOut.exp := rawOut_exp
        io.rawOut.sig := rawOut_sig(sigWidth - 1, 0)
    }

    io.rawOut.isNaN := io.a.isNaN || io.b.isNaN
    io.rawOut.isInf := notNaN_isInfOut
    io.rawOut.isZero := notNaN_isZeroOut
    io.invalidExc := Utils.isSigNaNUnsignedRawFloat(io.a) || Utils.isSigNaNUnsignedRawFloat(io.b) || notSigNaN_invalidExc    
}


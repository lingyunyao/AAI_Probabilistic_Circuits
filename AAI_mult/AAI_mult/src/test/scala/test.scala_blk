import chisel3._
import chiseltest._
import org.scalatest._
import org.scalatest.flatspec.AnyFlatSpec
import java.io.File

class Approx_multi_RawFNWrapper(expWidth: Int, sigWidth: Int) extends chisel3.Module {
  val io = IO(new Bundle {
    val a = Input(new RawFloat(expWidth, sigWidth))
    val b = Input(new RawFloat(expWidth, sigWidth))
    val invalidExc = Output(Bool())
    val rawOut = Output(new RawFloat(expWidth, sigWidth + 2))
  })

  val Approx_multi_RawFN = Module(new Approx_multi_RawFN(expWidth, sigWidth))
  Approx_multi_RawFN.io.a := io.a
  Approx_multi_RawFN.io.b := io.b
  io.invalidExc := Approx_multi_RawFN.io.invalidExc
  io.rawOut := Approx_multi_RawFN.io.rawOut
}
class Approx_multi_RawFNTester extends AnyFlatSpec with ChiselScalatestTester {
  "Approx_multi_RawFN" should "multiply two floating point numbers" in {
    test(new Approx_multi_RawFNWrapper(8, 23)).withAnnotations(Seq(WriteVcdAnnotation)) { dut =>
      dut.io.a.isNaN.poke(false.B)
      dut.io.a.isInf.poke(false.B)
      dut.io.a.isZero.poke(false.B)
      dut.io.a.exp.poke("b10000010".U.litValue)
      dut.io.a.sig.poke("b00111000000000000000000".U)

      dut.io.b.isNaN.poke(false.B)
      dut.io.b.isInf.poke(false.B)
      dut.io.b.isZero.poke(false.B)
      dut.io.b.exp.poke("b01111110".U.litValue)
      dut.io.b.sig.poke("b00100000000000000000000".U)

      dut.clock.step(1)

      // Generate VCD file
      val vcdFileName = "waveform.vcd"
      val vcdFile = new File(vcdFileName)
      dut.clock.setTimeout(0)
      dut.clock.step(10)

      //assert(dut.io.rawOut.sig.peek().litValue == 5.484375)
//      assert(dut.io.rawOut.peek().litValue == 5.484375)
      //assert(dut.io.rawOut.peek().litToDouble() == 5.484375)
      val rawOut = dut.io.rawOut.peek()
      val bias = (1 << (8 - 1)) - 1
//      val sign = if(rawOut.sign.litToBoolean()) -1.0 else 1.0
      val exponent = rawOut.exp.litValue.toInt - bias
      val significand = rawOut.sig.litValue.toDouble
      val decimalValue = significand * scala.math.pow(2, exponent)
      assert(decimalValue == 5.484375)
    }
  }
}


import chisel3._
import chisel3.stage.{ChiselStage, ChiselGeneratorAnnotation}
//import hardfloat._
import chisel3.util._


class RawFloat(expWidth: Int, sigWidth: Int) extends Bundle {
//  val isNaN = Bool()
//  val isInf = Bool()
//  val isZero = Bool()
  val exp = UInt((expWidth).W)
  val sig = UInt(sigWidth.W)
}


//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//class AddRawFN(expWidth: Int, sigWidth: Int) extends RawModule
class AddRawFN(expWidth: Int, sigWidth: Int) extends Module
{
    val io = IO(new Bundle {
        //val subOp = Input(Bool())
        val a = Input(new RawFloat(expWidth, sigWidth))
        val b = Input(new RawFloat(expWidth, sigWidth))
//        val invalidExc = Output(Bool())
        val rawOut = Output(new RawFloat(expWidth, sigWidth))
    })

//    val notSigNaN_invalidExc = (io.a.isInf && io.b.isZero) || (io.a.isZero && io.b.isInf)
//    val notNaN_isInfOut = io.a.isInf || io.b.isInf

    val a_iszero = Wire(UInt(1.W))
    val b_iszero = Wire(UInt(1.W))
    when ((io.a.exp === 0.U) & (io.a.sig === 0.U)) {
      a_iszero := 1.U
    }.otherwise {
      a_iszero := 0.U
    }

    when ((io.b.exp === 0.U) & (io.b.sig === 0.U)) {
      b_iszero := 1.U
    }.otherwise {
      b_iszero := 0.U
    }

    val notNaN_isZeroOut = a_iszero & b_iszero

    val common_exp = Wire(UInt(expWidth.W))
    val small_sig = Wire(UInt((sigWidth).W))
    val large_sig = Wire(UInt((sigWidth).W))
    val modNatAlignDist = Wire(UInt((expWidth + 1).W))

    val sDiffExps = Cat(0.U(1.W), io.a.exp) - Cat(0.U(1.W), io.b.exp)

    val sDiffExps_reg = RegNext(sDiffExps)

    when (sDiffExps_reg(expWidth) === 1.U(1.W)) {
        modNatAlignDist := -sDiffExps_reg(expWidth - 1, 0)
        common_exp := io.b.exp
        small_sig := io.a.sig
        large_sig := io.b.sig
    }.otherwise {
        modNatAlignDist := sDiffExps_reg(expWidth - 1, 0)
        common_exp := io.a.exp
        small_sig := io.b.sig
        large_sig := io.a.sig
    }

    val pre_shifted_sig = Cat(01.U(2.W), small_sig, 0.U((sigWidth).W)) >> modNatAlignDist
    val pre_shifted_sig_reg = RegNext(pre_shifted_sig)

    val shifted_sig = Mux(modNatAlignDist > (sigWidth + 1).U, 0.U, pre_shifted_sig_reg)((sigWidth + 1)*2 - 1, 0)
    val shifted_sig_reg = RegNext(shifted_sig)

    val sig_sum_1 = Cat(01.U(2.W), large_sig, 0.U((sigWidth).W))
    val sig_sum = (sig_sum_1 + shifted_sig_reg)((sigWidth + 1)*2 - 1, 0)
    //val sig_sum = (sig_sum_1 + shifted_sig_reg)
    val sig_sum_reg = RegNext(sig_sum)

    val fullrawout_exp = Wire(UInt((expWidth).W))
    val fullrawout_sig = Wire(UInt(((sigWidth + 1)*2).W))

    when (notNaN_isZeroOut === 1.U) {
      fullrawout_sig := 0.U
      fullrawout_exp := 0.U
    } .elsewhen (a_iszero === 1.U) {
      fullrawout_sig := Cat(io.b.sig, 0.U((sigWidth+2).W))
      fullrawout_exp := io.b.exp
    } .elsewhen (b_iszero === 1.U) {
      fullrawout_sig := Cat(io.a.sig, 0.U((sigWidth+2).W))
      fullrawout_exp := io.a.exp
    } .elsewhen (sig_sum_reg((sigWidth+1)*2-1) === 1.U(1.W)) {
      fullrawout_sig := sig_sum << 1
      fullrawout_exp := common_exp + 1.U

    } .otherwise {
      fullrawout_sig := sig_sum << 2
      fullrawout_exp := common_exp

    }

    val fullrawout_exp_reg = RegNext(fullrawout_exp)
    val fullrawout_sig_reg = RegNext(fullrawout_sig)

    val sig = fullrawout_sig_reg
    val guardBit = sig(sigWidth + 1) // G
    val roundBit = sig(sigWidth) // R
    val stickyBit = sig(sigWidth - 1, 0).orR // S: set if any of the rest bits are set
    val leastSigBitOfResult = sig(sigWidth + 2) // the least significant bit of the pre-rounded result

    // roundUp is true when GRS is 101, 110, 111 or when we have a tie (GRS = 100) and the number is odd
    val roundUp = guardBit & (roundBit | stickyBit | (!roundBit & !stickyBit & leastSigBitOfResult))
    val preRoundSig = Cat(0.U(1.W), sig((sigWidth + 1)*2 - 1, sigWidth + 2))

    val rawOut_sig = Mux(roundUp, preRoundSig + 1.U, preRoundSig)
    val rawOut_exp = Wire(UInt((expWidth).W))
    when (rawOut_sig(sigWidth) === 1.U(1.W)) {
      rawOut_exp := fullrawout_exp_reg + 1.U
    }.otherwise {
      rawOut_exp := fullrawout_exp_reg
    }

    val rawOut_sig_reg = RegNext(rawOut_sig(sigWidth - 1, 0))
    val rawOut_exp_reg = RegNext(rawOut_exp)

    io.rawOut.sig := rawOut_sig_reg

    io.rawOut.exp := rawOut_exp_reg
    //io.rawOut.isNaN := io.a.isNaN || io.b.isNaN
    //io.rawOut.isInf := notNaN_isInfOut
    //io.rawOut.isZero := notNaN_isZeroOut
    //io.invalidExc := Utils.isSigNaNUnsignedRawFloat(io.a) || Utils.isSigNaNUnsignedRawFloat(io.b) || notSigNaN_invalidExc    
}


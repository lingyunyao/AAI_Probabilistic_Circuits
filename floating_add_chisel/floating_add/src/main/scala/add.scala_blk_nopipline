import chisel3._
import chisel3.stage.{ChiselStage, ChiselGeneratorAnnotation}
import hardfloat._
import chisel3.util._

class RawFloat(expWidth: Int, sigWidth: Int) extends Bundle {
  val isNaN = Bool()
  val isInf = Bool()
  val isZero = Bool()
  val exp = UInt((expWidth).W)
  val sig = UInt(sigWidth.W)
}

object Utils {
  def isSigNaNUnsignedRawFloat(x: RawFloat): Bool = {
    val expWidth = x.exp.getWidth - 1
    val sigWidth = x.sig.getWidth
    x.isNaN && !x.isInf && !x.isZero && x.exp(expWidth - 1, 0) === ((1 << expWidth) - 1).U && x.sig(sigWidth - 1) === 0.U && x.sig(sigWidth - 2, 0) =/= 0.U
  }
}



//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//class AddRawFN(expWidth: Int, sigWidth: Int) extends RawModule
class AddRawFN(expWidth: Int, sigWidth: Int) extends Module
{
    val io = IO(new Bundle {
        //val subOp = Input(Bool())
        val a = Input(new RawFloat(expWidth, sigWidth))
        val b = Input(new RawFloat(expWidth, sigWidth))
        val invalidExc = Output(Bool())
        val rawOut = Output(new RawFloat(expWidth, sigWidth))
    })

    val notSigNaN_invalidExc = (io.a.isInf && io.b.isZero) || (io.a.isZero && io.b.isInf)
    val notNaN_isInfOut = io.a.isInf || io.b.isInf
    val notNaN_isZeroOut = io.a.isZero || io.b.isZero

    val common_exp = Wire(UInt(expWidth.W))
    val small_sig = Wire(UInt((sigWidth).W))
    val large_sig = Wire(UInt((sigWidth).W))
    val modNatAlignDist = Wire(UInt((expWidth + 1).W))

    val sDiffExps = Cat(0.U(1.W), io.a.exp) - Cat(0.U(1.W), io.b.exp)

    when (sDiffExps(expWidth) === 1.U(1.W)) {
        modNatAlignDist := -sDiffExps(expWidth - 1, 0)
        common_exp := io.b.exp
        small_sig := io.a.sig
        large_sig := io.b.sig
    }.otherwise {
        modNatAlignDist := sDiffExps(expWidth - 1, 0)
        common_exp := io.a.exp
        small_sig := io.b.sig
        large_sig := io.a.sig
    }

    val pre_shifted_sig = Cat(01.U(2.W), small_sig, 0.U((sigWidth).W)) >> modNatAlignDist
    val shifted_sig = Mux(modNatAlignDist > (sigWidth + 1).U, 0.U, pre_shifted_sig)((sigWidth + 1)*2 - 1, 0)
    //val shifted_sig = 0.U(((sigWidth + 1)*2).W)


    val sig_sum = (Cat(01.U(2.W), large_sig, 0.U((sigWidth).W)) + shifted_sig)((sigWidth + 1)*2 - 1, 0)
    //val result_exp = UInt((expWidth).W)
   
    val fullrawout_exp = Wire(UInt((expWidth).W))
    val fullrawout_sig = Wire(UInt(((sigWidth + 1)*2).W))

    when (sig_sum((sigWidth+1)*2-1) === 1.U(1.W)) {
      fullrawout_sig := sig_sum << 1
      fullrawout_exp := common_exp + 1.U

    } .otherwise {
      fullrawout_sig := sig_sum << 2
      fullrawout_exp := common_exp

    }

    val sig = fullrawout_sig
    val guardBit = sig(sigWidth + 1) // G
    val roundBit = sig(sigWidth) // R
    val stickyBit = sig(sigWidth - 1, 0).orR // S: set if any of the rest bits are set
    val leastSigBitOfResult = sig(sigWidth + 2) // the least significant bit of the pre-rounded result

    // roundUp is true when GRS is 101, 110, 111 or when we have a tie (GRS = 100) and the number is odd
    val roundUp = guardBit & (roundBit | stickyBit | (!roundBit & !stickyBit & leastSigBitOfResult))
    val preRoundSig = sig((sigWidth + 1)*2 - 1, sigWidth + 2)

    // The Mux function will select the preRoundSig + 1.U if roundUp is true, or preRoundSig otherwise.
    // When roundUp is not true, it means we should "round down", i.e., just take the number as it is, effectively truncating the extra bits.
    io.rawOut.sig := Mux(roundUp, preRoundSig + 1.U, preRoundSig)

    //io.rawOut.sig := sig_sum(sigWidth - 1, 0)
    io.rawOut.exp := fullrawout_exp
    io.rawOut.isNaN := io.a.isNaN || io.b.isNaN
    io.rawOut.isInf := notNaN_isInfOut
    io.rawOut.isZero := notNaN_isZeroOut
    io.invalidExc := Utils.isSigNaNUnsignedRawFloat(io.a) || Utils.isSigNaNUnsignedRawFloat(io.b) || notSigNaN_invalidExc    
    //val norm_shift = Reg(UInt(sigWidth.W))
}

